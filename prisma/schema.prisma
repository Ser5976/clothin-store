// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])

}
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User{
  id String    @id @default(uuid())
  name String?
  email String? @unique
  role Role @default(User)
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  catr Cart?
  address Address[]
  review Review[]
  favorites Favorites[]
  estimation Estimation[]
  order Order[]

 @@index([id,email])
}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  User
  ADMIN
}

model Product{
  id String @id @default(uuid())
  name String 
  price Decimal
  oldPrice Decimal?
  discount      Float? 
  description   String?
  isFeatured  Boolean   @default(false)
  isAvailability  Boolean   @default(true)
  isBestseller Boolean @default(false)
  image Image[]
  orderItems  OrderItem[] 
  cartItems CartItems[]
  typeId String
  type Type @relation(fields: [typeId],references: [id])
  sizes   ProductOnSize[]
  colors ProductOnColor[]
  brandId String
  brand  Brand @relation(fields: [brandId],references: [id])
  categoryId String
  category  Category @relation(fields: [categoryId],references: [id])
  materialId String
  material Material @relation(fields: [materialId],references: [id])
  rating Rating?
  estimation Estimation[]
  review Review[]
  favorites Favorites[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([categoryId])
  @@index([typeId])
  @@index([materialId])
  @@index([brandId])
}
model Image{
  id String @id @default(uuid())
  url String
  fileKey String
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  @@index([productId])

}
model Category{
  id String @id @default(uuid())
  name String @unique
  product Product[]

}
model Type{
  id String @id @default(uuid())
  name  String @unique
  product Product[]

}

model Size{
  id String @id @default(uuid())
  value String @unique
  product ProductOnSize[] 
}

// из-за onDelete:Cascade, пришлось сделать отношение многие ко многим явными(т.е. создать объединяющую таблицу)
model ProductOnSize{
  product Product @relation(fields: [productId], references: [id], onDelete:Cascade)
  productId String 
  size Size @relation(fields: [sizeId], references: [id])
  sizeId String 
  assignedAt DateTime @default(now())
  assignedBy String
  
@@id([sizeId,productId])
@@index([productId])
@@index([sizeId])
}
model Color{
  id String @id @default(uuid())
  name String 
  value String @unique
  product ProductOnColor[]
}
// из-за onDelete:Cascade, пришлось сделать отношение многие ко многим явными(т.е. создать объединяющую таблицу)
model ProductOnColor{
  product Product @relation(fields: [productId], references: [id], onDelete:Cascade)
  productId String 
  color Color @relation(fields: [colorId],references: [id])
  colorId String 
  assignedAt DateTime @default(now())
  assignedBy String

@@id([productId,colorId])
@@index([productId])
@@index([colorId])
}
model Material{
  id String @id @default(uuid())
  name String @unique
  product Product[]
}
model Brand{
  id String @id @default(uuid())
  name String @unique
  product Product[]
}
// модель,куда мы записываем рассчитанный рейтинг и количество оценок
model Rating{
  id String @id @default(uuid())
  value Float @default(0)
  count Int @default(0)
  productId String @unique
  product Product @relation(fields: [productId],references: [id],onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
   @@index([productId])
}
model Estimation{
  id String @id @default(uuid())
  value Float
  userId String @unique
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  productId String @unique
  product Product @relation(fields: [productId],references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([productId])
}
model Review{
  id String @id @default(uuid())
  content String
  response String?
  userId String 
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  productId String 
  product Product @relation(fields: [productId],references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([productId])
}
model Favorites{
  id String @id @default(uuid())
  userId String 
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  productId String 
  product Product @relation(fields: [productId],references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([productId])
}
model Order {
  id        String    @id @default(uuid())
  userId String?
  user User? @relation(fields: [userId],references: [id],onDelete: Cascade)
  name String
  orderItems OrderItem[] 
  isPaid     Boolean   @default(false)
  amount Decimal
  phone      String  
  address    Address?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}


model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  
  order     Order   @relation(fields: [orderId], references: [id],onDelete: Cascade)
  productId String  
  product   Product @relation(fields: [productId], references: [id],onDelete: Cascade)
  quantity Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}
model Billboard {
  id          String @id @default(uuid())
  title      String?
  subTitle   String?
  image    BillboardImg?
  link String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model BillboardImg{
  id          String @id @default(uuid())
  url String
  fileKey String
  billboardId String @unique
  billboard Billboard @relation(fields: [billboardId],references: [id],onDelete: Cascade)
  
}
model Cart{
  id String @id @default(uuid())
  userId String @unique
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  items CartItems[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}
model CartItems{
  id String @id @default(uuid())
  cartId String
  cart Cart @relation(fields: [cartId],references: [id],onDelete: Cascade)
  productId String
  product Product @relation(fields: [productId],references: [id])
  quantity Int @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([cartId])
  @@index([productId])
}
model Address{
  id String @id @default(uuid())
  country String @default("")
  city String
  street String
  house String
  flat String @default("")
  postalCode String @default("")
  userId String?
  orderId String? @unique
  order Order? @relation(fields: [orderId],references: [id],onDelete: Cascade)
  user User? @relation(fields: [userId],references: [id],onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
 
  @@index([orderId])
  @@index([userId])
}

model Customers{
  id String @id @default(uuid())
  name String @unique
  longtext String @db.LongText
}
 model Phone{
  id String @id @default(uuid())
  title String?
  phone String @unique
 }
 model TopCategories{
  id String @id @default(uuid())
  title String
  link String
  image TopCategoriesImg?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
 }
  model TopCategoriesImg{
  id          String @id @default(uuid())
  url String
  fileKey String
  topCategoriesId String @unique
  topCategories TopCategories @relation(fields: [topCategoriesId],references: [id],onDelete: Cascade)
  
}


